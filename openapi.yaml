openapi: 3.1.0
info:
  title: "Juju Client API"
  summary: Next generation Juju client API draft.
  description: |
    This specification represents early but ongoing design work for a next-generation, RESTful Juju
    client API. It **should not** be used as reference for any currently released version of Juju,
    and is unlikely to be implemented until some time in 2025.

    The source code for this page, and the OpenAPI specification can be found on
    [Github](https://github.com/jameinel/juju-api). You can also find a progress tracker that
    indicates which of the prior facade calls have been covered by this design.

    The [OpenAPI Spec](https://github.com/jameinel/juju-api/blob/main/openapi.yaml) can be entered
    directly into the [Swagger Editor](https://editor-next.swagger.io/) for a slightly different
    experience when exploring the API if preferable.

    In addition to the new design, there is a [naive
    conversion](https://jnsgruk.github.io/juju-api/generated.html) of the existing Juju facade
    schema available. This was generated from the upstream
    [schema.json](https://github.com/juju/juju/blob/3.3/apiserver/facades/schema.json) and is used
    solely for the purposes of reference, and enables existing schemas to be easily reused during
    the design on the new API where appropriate.
  # termsOfService: http://swagger.io/terms/
  contact:
    email: jon.seager@canonical.com
  license:
    name: AGPL 3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: "1.0"
externalDocs:
  description: Find out more about Juju.
  url: https://juju.is/docs
servers:
  - url: https://localhost:17777/api/v1
tags:
  - name: application
    description: Manage Juju applications
    externalDocs:
      description: Find out more about Juju applications.
      url: https://juju.is/docs/olm/manage-applications
  - name: charms
    description: Manage Juju charm contents
  - name: cloud
    description: Manage Juju clouds
    externalDocs:
      description: Find out more about Juju clouds.
      url: https://juju.is/docs/olm/manage-clouds
  - name: machine
    description: Manage Juju machines
    externalDocs:
      description: Find out more about Juju machines.
      url: https://juju.is/docs/olm/manage-models
  - name: model
    description: Manage Juju models
    externalDocs:
      description: Find out more about Juju models.
      url: https://juju.is/docs/olm/manage-models
  - name: secret
    description: Manage Juju secrets
    externalDocs:
      description: Find out more about Juju secrets.
      url: https://juju.is/docs/olm/manage-secrets
  - name: space
    description: Manage Juju spaces
    externalDocs:
      description: Find out more about Juju spaces.
      url: https://juju.is/docs/olm/manage-spaces
  - name: subnet
    description: Manage Juju subnets
    externalDocs:
      description: Find out more about Juju subnets.
      url: https://juju.is/docs/olm/manage-subnets
  - name: user
    description: Manage Juju users
    externalDocs:
      description: Find out more about Juju users.
      url: https://juju.is/docs/olm/manage-users
paths:
  /clouds:
    get:
      tags:
        - cloud
      summary: Get clouds that specified user has access to.
      description: |
        Returns clouds that the specified user has access to. Controller admins (superuser) can
        list clouds for any user. Other users can only ask about their own clouds.
      operationId: listClouds
      parameters:
        - $ref: "#/components/parameters/ShowSupported"
        - $ref: "#/components/parameters/Detailed"
        - $ref: "#/components/parameters/All"
        - $ref: "#/components/parameters/UserQuery"
      responses:
        "200":
          description: List of supported clouds.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - cloud
      summary: Adds a new cloud.
      description: Adds a new cloud, different from the one managed by the controller.
      operationId: addCloud
      parameters:
        - $ref: "#/components/parameters/Force"
      requestBody:
        description: Cloud creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudDetail"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /clouds/{cloud}:
    get:
      tags:
        - cloud
      summary: Get a specific cloud.
      description: Returns detailed information about a given cloud.
      operationId: getCloud
      parameters:
        - $ref: "#/components/parameters/Cloud"
      responses:
        "200":
          description: Detailed information about the requested cloud.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - cloud
      summary: Delete a cloud.
      description: |
        Delete a cloud from the controller. If the cloud is in use (has any model deployed),
        the removal will fail.
      operationId: deleteCloud
      parameters:
        - $ref: "#/components/parameters/Cloud"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - cloud
      summary: Update a cloud.
      description: Update a clouds.
      operationId: updateCloud
      parameters:
        - $ref: "#/components/parameters/Cloud"
      requestBody:
        description: An object describing the changes to the cloud.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudUpdate"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model-defaults:
    get:
      tags:
        - model
      summary: List model defaults.
      description: Returns the model defaults for the specified clouds.
      operationId: listModelDefaults
      parameters:
        - name: clouds
          in: query
          description: The clouds for which to fetch the model defaults.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: List of model defaults for the specified clouds.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelDefaultsList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - model
      summary: Update model defaults.
      description: |
        Set or unset model defaults for the specified cloud.

        Model default configuration settings are specific to the cloud on which the model is
        deployed. If the controller hosts more than one cloud, the cloud (and optionally region)
        must be specified.
      operationId: updateModelDefaults
      parameters:
        - name: cloud
          in: query
          description: The cloud for which to update the model defaults.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: cloud-region
          in: query
          description: The cloud region for which to update the model defaults.
          required: false
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: An object describing those model defaults to set or unset.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelDefaultsUpdate"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models:
    get:
      tags:
        - model
      summary: List models.
      description: |
        Returns the models that the specified user has access to in the current server.

        Controller admins (superuser) can list models for any user.

        Other users can only ask about their own models.
      operationId: listModels
      parameters:
        - $ref: "#/components/parameters/All"
        - $ref: "#/components/parameters/Detailed"
        - $ref: "#/components/parameters/UserQuery"
      responses:
        "200":
          description: List of models the specified user has access to.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - model
      summary: Create a new model.
      description: Creates a new model using the account and model config specified in the args.
      operationId: createModel
      requestBody:
        description: Model creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelCreateArgs"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}:
    get:
      tags:
        - model
      summary: Get a specific model.
      description: Returns detailed information about a given model.
      operationId: getModel
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      responses:
        "200":
          description: Detailed information about the requested model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - model
      summary: Delete a model.
      description: Delete a model from the controller.
      operationId: deleteModel
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/DestroyStorage"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/MaxWait"
        - $ref: "#/components/parameters/Timeout"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - model
      summary: Update the model.
      description: |
        Update various attributes of the model including user access, config and credentials.
      operationId: updateModel
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      requestBody:
        description: An object describing the changes to model.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelUpdate"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/apps:
    post:
      tags:
        - application
      summary: Deploy an application into the model.
      description: |
        Deploy an application into the model.

        Returns a simple response with a location header pointing to the deployed
        application.

        To deploy a local charm, first upload charms and resources, getting
        references to them, which can then be supplied when creating an
        application.
      operationId: deploy
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/DryRun"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeployArgs"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/apps/{app}:
    get:
      tags:
        - application
      summary: Get information about an application.
      description: |
        Get detailed information about a specific application that's deployed within the model.
      operationId: getApplication
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
      responses:
        "200":
          description: Detailed information about the requested application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - application
      summary: Update the application.
      description: |
        Update various attributes of the application including config, constraints, exposure, etc.

        To unset an application config or constraint, it's value should be set to 'null'.
      operationId: updateApplication
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
      requestBody:
        description: An object describing the changes to the application.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpdate"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - application
      summary: Remote an application.
      description: Removes the given application from the model.
      operationId: deleteApplication
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
        - $ref: "#/components/parameters/DestroyStorage"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/MaxWait"
        - $ref: "#/components/parameters/DryRun"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/apps/{app}/resources/{resource}:
    post:
      tags:
        - application
      summary: Upload a resource for an application.
      description: |
        Upload a resource for a specific application.

        If a resource is required at deploy time, the resource IDs required can be found by
        GETing the model and looking for the `resources` field, and any resource that have the
        property `pending-upload` set to `true`.
      operationId: uploadResource
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
        - $ref: "#/components/parameters/Resource"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/DryRun"
      requestBody:
        content:
          application/octet-stream: {}
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  # TODO: Should this just be at PATCH /models/{model}/apps/{app}?
  /models/{namespace}/{model}/apps/{app}:refresh:
    patch:
      tags:
        - application
      summary: Refresh the charm for an application.
      description: |
        Refresh an application to a given charm, revision or track.
      operationId: refreshApplication
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/DryRun"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationRefresh"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/apps/{app}:scale:
    patch:
      tags:
        - application
      summary: Scale an application.
      description: |
        Scale an application up or down.
      operationId: scaleApplication
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
          # The following are applicable only when scaling an application down
        - $ref: "#/components/parameters/DestroyStorage"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/MaxWait"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationScale"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/charms:
    post:
      tags:
        - charms
      summary: Upload a charm blob to the juju controller so that you can later deploy the charm
      description: |
        Record a local charm with the controller.

        To deploy a local charm, first upload charms and resources, getting
        references to them, which can then be supplied when creating an
        application.
      operationId: uploadCharm
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # TODO: jam 2025-02-20 these are rough approximations of the information we pull out of a Charm PUT request
                charmName:
                  type: string
                sha256:
                  type: string
                # TODO: jam 2025-02-20 We currently pull a lot of information
                #  from the charm URL (Juju-Curl), we take a 7-byte 'short sha'
                #  from the name, and then pop off the charm's revision from the
                #  URL, as well as the origin (local vs charmhub). This all feels like
                #  we should just make it clear fields as part of a multi-part POST
                charmURL:
                  type: string
                  # $ref: "#/components/schema/Charm"
          application/zip:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/charms/{charm-name}:
    # TODO: jam 2025-03-04 this needs a revision of some sort, to disambiguate revisions of the charm over time
    get:
      tags:
        - charms
      summary: Upload a charm blob to the juju controller so that you can later deploy the charm
      description: |
        Download the content of an uploaded charm
      operationId: downloadCharm
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/CharmName"
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/charms/{charm-name}/resources:
    # TODO: jam 2025-03-04 this needs a revision of some sort, to disambiguate revisions of the resources over time
    post:
      tags:
        - charms
      summary: Upload a charm blob to the juju controller so that you can later deploy the charm
      description: |
        Record a local charm with the controller.

        To deploy a local charm, first upload charms and resources, getting
        references to them, which can then be supplied when creating an
        application.
      operationId: charmResources
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/CharmName"
      requestBody:
        content:
          application/zip:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/integrations:
    post:
      tags:
        - application
      summary: Integrate two applications.
      description: Integrates applications using specified endpoints and returns the integration info.
      operationId: integrate
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrateArgs"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/integrations/{integration}:
    # TODO: jam 2025-02-20 There should almost definitely be a GET possible for
    # an integration, plausibly to get you the current content of that relation
    delete:
      tags:
        - application
      summary: Remove the integration between two applications.
      description: The integration between two applications can be dissolved by removing this entity.
      operationId: deleteIntegration
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Integration"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/machines:
    get:
      tags:
        - model
      summary: Get a listing of all the machines in a model
      description: |
        Returns just the information about what machines exist in this model.
        Likely a minimal amount of information (equivalent for `juju machines`,
        but not the detail that you could get with `juju show-machine X`)
      operationId: getMachines
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      responses:
        "200":
          description: Status information about the requested machine.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - model
      summary: Add a machine to the model.
      description: |
        Returns the machines' object including the machines' url.
        Likely a minimal amount of information (equivalent to `juju add-machine`)
      operationId: postMachines
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineCreateArgs"
          required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/machines/{machine-id}:
    get:
      tags:
        - machine
      description: |
        Returns details of the specified machine.
      operationId: getMachine
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/MachineID"
      responses:
        "200":
          description: Details of the requested machine.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelMachine"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - machine
      summary: Delete a machine.
      description: |
        Permanently removes a machine from the controller.
      operationId: deleteMachine
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/MachineID"
        - $ref: "#/components/parameters/Wait"
        - $ref: "#/components/parameters/KeepInstance"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/{namespace}/{model}/status:
    get:
      tags:
        - model
      summary: Get the status of a specific model.
      description: |
        Returns status information about a model, such as applications deployed and machines.
      operationId: getModelStatus
      parameters:
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/Model"
      responses:
        "200":
          description: Status information about the requested model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /secret-backends:
    get:
      tags:
        - secret
      summary: Get secrets backends.
      description: |
        Returns all the available secret backends.
      operationId: listSecretBackends
      parameters:
        - $ref: "#/components/parameters/SecretBackendNames"
        - $ref: "#/components/parameters/ShowSecrets"
      responses:
        "200":
          description: List of secret backends.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretBackendList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - secret
      summary: Create a new secret backend.
      description: |
        Create a new secret backend for the controller.

        Returns a simple response with a location header pointing to the new backend.
      operationId: createSecretBackend
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretBackend"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /secret-backends/{secret-backend}:
    get:
      tags:
        - secret
      description: |
        Returns details of the specified secret backend.
      operationId: getSecretBackend
      parameters:
        - $ref: "#/components/parameters/SecretBackend"
      responses:
        "200":
          description: Details of the requested secret backend.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretBackend"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - secret
      summary: Delete a secret backend.
      description: |
        Permanently removes a secret backend from the controller.
      operationId: deleteSecretBackend
      parameters:
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/SecretBackend"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - secret
      summary: Updates a secret backend.
      description: |
        Updates a given secret backend.
      operationId: updateSecretBackend
      parameters:
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/SecretBackend"
      requestBody:
        description: SecretBackend update parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretBackend"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /secrets:
    get:
      tags:
        - secret
      summary: Get secrets.
      description: |
        Returns all the available secrets.
      operationId: listSecrets
      parameters:
        - $ref: "#/components/parameters/SecretsFilter"
        - $ref: "#/components/parameters/ShowSecrets"
      responses:
        "200":
          description: List of secrets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /spaces:
    get:
      tags:
        - space
      summary: Get spaces.
      description: |
        Returns all the available spaces and their associated subnets.
      operationId: listSpaces
      parameters:
        - $ref: "#/components/parameters/ReloadSpaces"
      responses:
        "200":
          description: List of spaces.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - space
      summary: Adds a new space.
      description: |
        Creates a new Juju network space, optionally associating the specified subnets with it.
      operationId: addSpace
      requestBody:
        description: Space creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceCreateArgs"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /spaces/{space}:
    get:
      tags:
        - space
      description: |
        Returns details of the specified space.
      operationId: getSpace
      parameters:
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/Space"
      responses:
        "200":
          description: Details of the requested space.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - space
      summary: Delete a space.
      description: |
        Permanently removes a space from the current controller.
      operationId: deleteSpace
      parameters:
        - $ref: "#/components/parameters/Space"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - space
      summary: Updates a space.
      description: |
        Updates a given space including name and subnets.
      operationId: updateSpace
      parameters:
        - $ref: "#/components/parameters/Space"
      requestBody:
        description: Space update parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceUpdateArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /subnets:
    get:
      tags:
        - subnet
      summary: Get subnets.
      description: |
        Returns all subnets that match the specified filters.
      operationId: listSubnets
      parameters:
        - $ref: "#/components/parameters/CIDRs"
        - $ref: "#/components/parameters/SpaceQuery"
        - $ref: "#/components/parameters/AvailabilityZone"
      responses:
        "200":
          description: List of subnets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubnetList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  # TODO: Should this really just be GET /clouds, where clouds each return their zones?
  /subnets/zones:
    get:
      tags:
        - subnet
      summary: Get all known availability zones.
      description: |
        Returns all known availability zones across all known clouds.
      operationId: listAvailabilityZones
      responses:
        "200":
          description: List of availability zones.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailabilityZoneList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /subnets/{subnet}:
    get:
      tags:
        - subnet
      summary: Get a specific subnet.
      description: |
        Returns details of the specified subnet.
      operationId: getSubnet
      parameters:
        - $ref: "#/components/parameters/Subnet"
      responses:
        "200":
          description: Details of the requested subnet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subnet"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users:
    post:
      tags:
        - user
      summary: Adds a new user.
      description: Adds a new user to the controller.
      operationId: addUser
      requestBody:
        description: User creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserArgs"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{user}:
    get:
      tags:
        - user
      summary: Returns information about a specific user.
      description: |
        Returns information about a specific user.
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Detailed information about the requested user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - user
      summary: Updates a user.
      description: |
        Updates a given user including display-name, enabled/disabled state and password.
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/User"
      requestBody:
        description: User creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - user
      summary: Delete a user.
      description: |
        Permanently removes a user from the current controller. While the user is permanently
        removed we keep it's information around for auditing purposes.
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    Application:
      type: object
      description: Information about a given application.
      properties:
        charm:
          type: string
        base:
          $ref: "#/components/schemas/Base"
        channel:
          $ref: "#/components/schemas/CharmChannel"
        revision:
          type: integer
        constraints:
          $ref: "#/components/schemas/Constraints"
        config:
          type: object
          additionalProperties: true
        endpoint-bindings:
          type: object
          additionalProperties:
            type: string
        exposed:
          type: boolean
        exposed-endpoints:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ExposedEndpoint"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        principal:
          type: boolean
      additionalProperties: false
      required:
        - charm
        - principal
        - exposed
    ApplicationRefresh:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        charm-name:
          type: string
        config:
          type: object
          additionalProperties:
            type: string
        config-yaml:
          type: string
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        storage-constraints:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/StorageConstraints"
      additionalProperties: false
      required:
        - application
        - charm-name
    ApplicationScale:
      type: object
      properties:
        attach-storage:
          description: "Define a list storage volumes that should be attached to new units. \n\nStorage volumes are specified as a list. If there are `n` new units being added, this\nproperty is either omitted completely, or contains `n` items. Units that do not require\nstorage to be attached should have a `null` entry. For example, if adding 3 new units\nwhere 2 require storage and 1 does not: `[\"storage-1\", null, \"storage-2\"]`.\n"
          type: array
          items:
            type: string
        placement:
          description: |
            Placement directive for new units to be added to the application.

            Placement directives are specified as a list. If there are `n` units to be added
            there can be `n` placement directives. If there are multiple units being added where
            some require a placement directive, and others do not, represent the placement for the
            units that don't require it with `null` - for example: `["lxd:7", null, "lxd:9"]`.
          type: array
          items:
            $ref: "#/components/schemas/Placement"
        scale:
          type: integer
          description: The target number of units for the application.
      additionalProperties: false
      required:
        - scale
    ApplicationUpdate:
      type: object
      properties:
        config:
          type: object
          additionalProperties: true
        config-yaml:
          type: string
        constraints:
          $ref: "#/components/schemas/Constraints"
        endpoint-bindings:
          type: object
          additionalProperties:
            type: string
        exposed:
          type: boolean
        exposed-endpoints:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ExposedEndpoint"
      additionalProperties: false
    Architecture:
      type: string
      enum:
        - amd64
        - arm64
        - i386
        - riscv64
    AvailabilityZone:
      type: object
      properties:
        available:
          type: boolean
        error:
          $ref: "#/components/schemas/Error"
        name:
          type: string
      additionalProperties: false
      required:
        - name
        - available
    AvailabilityZoneList:
      type: object
      properties:
        availability-zones:
          description: List of availability zones.
          type: array
          items:
            $ref: "#/components/schemas/AvailabilityZone"
      additionalProperties: false
      required:
        - availability-zones
    Base:
      type: object
      properties:
        channel:
          type: string
        name:
          type: string
      additionalProperties: false
      required:
        - name
        - channel
    CharmChannel:
      type: object
      properties:
        track:
          type: string
        risk:
          type: string
          enum:
            - stable
            - candidate
            - beta
            - edge
        branch:
          type: string
    CharmOrigin:
      type: object
      properties:
        architecture:
          $ref: "#/components/schemas/Architecture"
        base:
          $ref: "#/components/schemas/Base"
        channel:
          $ref: "#/components/schemas/CharmChannel"
        hash:
          description: The hash of the charm in CharmHub located by this origin.
          type: string
        id:
          type: string
        instance-key:
          description: |
            A unique string associated with the application.

            Create with the charmhub.CreateInstanceKey method.
          type: string
        revision:
          type: integer
        source:
          type: string
          enum:
            - local
            - charm-hub
        type:
          type: string
          enum:
            - charm
            - bundle
      additionalProperties: false
      required:
        - source
        - type
        - id
    Cloud:
      type: object
      properties:
        auth-types:
          type: array
          items:
            type: string
            enum:
              - access-key
              - instance-role
              - userpass
              - oauth1
              - oauth2
              - jsonfile
              - clientcertificate
              - httpsig
              - interactive
              - empty
              - auth-types
              - endpoint
              - regions
              - certfilename
        name:
          type: string
        regions:
          type: array
          items:
            $ref: "#/components/schemas/CloudRegion"
        type:
          type: string
          enum:
            - aws
            - azure
            - equinix
            - gce
            - lxd
            - k8s
            - oci
        users:
          type: array
          items:
            $ref: "#/components/schemas/CloudUser"
      additionalProperties: false
      required:
        - type
    CloudDetail:
      type: object
      allOf:
        - $ref: "#/components/schemas/Cloud"
        - type: object
          properties:
            # TODO: We should probably be modelling CA's properly in this spec?
            ca-certificates:
              type: array
              items:
                type: string
            default-cloud-region:
              type: string
            skip-tls-verify:
              type: boolean
          additionalProperties: false
    CloudList:
      type: object
      properties:
        clouds:
          description: List of supported clouds.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Cloud"
              - $ref: "#/components/schemas/CloudDetail"
      additionalProperties: false
      required:
        - clouds
    CloudRegion:
      type: object
      properties:
        endpoint:
          type: string
        identity-endpoint:
          type: string
        name:
          type: string
        storage-endpoint:
          type: string
        config:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - name
    CloudUpdate:
      type: object
      properties:
        permissions:
          description: List of cloud access updates.
          type: array
          items:
            $ref: "#/components/schemas/CloudUserAccessUpdate"
      additionalProperties: false
      required:
        - permissions
    CloudUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/CloudUserAccess"
        - type: object
          properties:
            display-name:
              type: string
          additionalProperties: false
          required:
            - display-name
    CloudUserAccess:
      type: object
      properties:
        access:
          description: Level of access granted to the specified user.
          type: string
          enum:
            - add-model
            - admin
        user:
          description: Identifier of the user to whom permissions apply.
          type: string
      additionalProperties: false
      required:
        - access
        - user
    CloudUserAccessUpdate:
      type: object
      allOf:
        - $ref: "#/components/schemas/CloudUserAccess"
        - type: object
          properties:
            action:
              description: Whether to 'grant' or 'revoke' the given permission for the specified user.
              type: string
              enum:
                - grant
                - revoke
          required:
            - action
      additionalProperties: false
    Constraints:
      description: |
        Describes a user's requirements of the hardware on which units of an application will run.

        Constraints are used to choose an existing machine onto which a unit will be deployed,
        or to provision a new machine if no existing one satisfies the requirements.
      type: object
      properties:
        allocate-public-ip:
          type: boolean
        architecture:
          description: Indicates that a machine must run the named architecture.
          $ref: "#/components/schemas/Architecture"
        container:
          description: Indicates that a machine must be the specified container type.
          $ref: "#/components/schemas/ContainerType"
        cores:
          description: Indicates that a machine must have at least that number of effective cores available.
          type: integer
        cpu-power:
          description: |
            Indicates that a machine must have at least that amount of CPU power available,
            where 100 CpuPower is considered to be equivalent to 1 Amazon ECU (or, roughly, a single 2007-era Xeon).
          type: integer
        image-id:
          description: |
            Indicates that a machine must use the specified image.

            This is provider specific, and for the moment is only implemented on MAAS clouds.
          type: string
        instance-role:
          description: |
            Indicates that the specified role/profile for the given cloud should be used.

            Only valid for clouds which support instance roles. Currently only for AWS with instance-profiles.
          type: string
        instance-type:
          description: |
            Indicates that the specified cloud instance type be used.

            Only valid for clouds which support instance types.
          type: string
        mem:
          description: Indicates that a machine must have at least that many megabytes of RAM.
          type: integer
        root-disk:
          description: Indicates that a machine must have at least that many megabytes of disk space available in the root disk.
          type: integer
        root-disk-source:
          description: |
            Determines what storage the root disk should be allocated from.

            This will be provider specific - in the case of vSphere it identifies the datastore the root disk file should be created in.
          type: string
        spaces:
          description: |
            Holds a list of juju network spaces that should be available (or not) on the machine.

            Positive and negative values are accepted, and the difference is the latter have a "^" prefix to the name.
          type: array
          items:
            type: string
        tags:
          description: Indicates tags that the machine must have applied to it.
          type: array
          items:
            type: string
        virt-type:
          description: |
            Indicates that a machine must run the named virtual type.

            Only valid for clouds with multi-hypervisor support.
          type: string
        zones:
          description: Holds a list of availability zones limiting where the machine can be located.
          type: array
          items:
            type: string
      additionalProperties: false
    ContainerType:
      type: string
      enum:
        - none
        - lxd
        - kvm
    DeployArgs:
      type: object
      properties:
        application-name:
          type: string
        attach-storage:
          type: array
          items:
            type: string
        charm-name:
          type: string
        config:
          type: object
          additionalProperties: true
        config-yaml:
          type: string
        constraints:
          $ref: "#/components/schemas/Constraints"
        devices:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Constraints"
        placement:
          type: array
          items:
            $ref: "#/components/schemas/Placement"
        scale:
          type: integer
          default: 1
        storage:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Constraints"
        trust:
          type: boolean
          default: false
        base:
          $ref: "#/components/schemas/Base"
        channel:
          $ref: "#/components/schemas/CharmChannel"
        endpoint-bindings:
          type: object
          additionalProperties:
            type: string
        resources:
          type: object
          additionalProperties:
            type: string
        revision:
          type: integer
      additionalProperties: false
      required:
        - charm-name
    Error:
      type: object
      properties:
        error:
          type: string
          examples:
            - Bad request.
        error-code:
          type: integer
          examples:
            - 400
        type:
          type: string
          examples:
            - error
      additionalProperties: false
      required:
        - error
        - error-code
        - type
    ExposedEndpoint:
      type: object
      properties:
        expose-to-cidrs:
          type: array
          items:
            type: string
        expose-to-spaces:
          type: array
          items:
            type: string
      additionalProperties: false
    IntegrateArgs:
      type: object
      properties:
        # TODO(jam) 2024-05-10: This probably shouldn't be 'provider/requirer'. We might make it src/dest
        #  but I don't think we want to require that API clients must know the details of the charms
        provider:
          $ref: "#/components/schemas/Integrator"
        requirer:
          $ref: "#/components/schemas/Integrator"
      additionalProperties: false
      required:
        - provider
        - requirer
    Integrator:
      description: An entity describing one end of an integration.
      type: object
      properties:
        model:
          type: string
        application:
          type: string
        endpoint:
          type: string
      required:
        - application
    MachineCreateArgs:
      type: object
      properties:
        base:
          $ref: "#/components/schemas/Base"
        constraints:
          $ref: "#/components/schemas/Constraints"
        storage-constraints:
          description: The credential to use when creating the new model.
          type: string
        placement:
          description: The name of the new model.
          type: string
        parent-id:
          description: Identifier of the owner of the new model.
          type: string
        container-type:
          description: Identifier of the cloud region in which to create the model.
          type: string
        instance-id:
          description: Identifier of the cloud region in which to create the model.
          type: string
        nonce:
          description: Identifier of the cloud region in which to create the model.
          type: string
        addresses:
          description: Identifier of the cloud region in which to create the model.
          type: string
        hardware-characteristics:
          description: Identifier of the cloud region in which to create the model.
          type: string
      additionalProperties: false
      required:
        - name
        - owner
    MachineHardware:
      type: object
      properties:
        architecture:
          $ref: "#/components/schemas/Architecture"
        availability-zone:
          type: string
        cores:
          type: integer
        cpu-power:
          type: integer
        mem:
          type: integer
        root-disk:
          type: integer
        tags:
          type: array
          items:
            type: string
        virt-type:
          type: string
      additionalProperties: false
    MachineList:
      type: array
      items:
        $ref: "#/components/schemas/ModelMachine"
      additionalProperties: false
    Model:
      description: Information about a given model.
      type: object
      properties:
        name:
          type: string
        owner:
          description: Identifier of the model's owner.
          type: string
        type:
          type: string
          enum: [caas, iaas]
        uuid:
          type: string
        agent-version:
          $ref: "#/components/schemas/Version"
        cloud-credential:
          description: Identifier for the model's cloud credential.
          type: string
        cloud-region:
          type: string
        cloud:
          description: Identifier for the model's cloud.
          type: string
        config:
          description: The model configuration.
          type: object
          additionalProperties: true
        constraints:
          description: Constraints applied to the model.
          $ref: "#/components/schemas/Constraints"
        controller-uuid:
          type: string
        counts:
          type: array
          items:
            $ref: "#/components/schemas/ModelEntityCount"
        default-series:
          type: string
        is-controller:
          type: boolean
        life:
          type: string
        migration:
          $ref: "#/components/schemas/ModelMigrationStatus"
        # TODO: Should this be an enum?
        provider-type:
          type: string
        sla:
          $ref: "#/components/schemas/ModelSLAInfo"
        users:
          type: array
          items:
            $ref: "#/components/schemas/ModelUser"
      additionalProperties: false
      required:
        - name
        - owner
        - type
        - uuid
        - controller-uuid
        - is-controller
        - cloud
        - life
        - counts
        - sla
        - agent-version
    ModelApplicationInfo:
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
      required:
        - name
    ModelCreateArgs:
      type: object
      properties:
        cloud:
          description: Identifier of the cloud on which to create the model.
          type: string
        config:
          description: The configuration of the new model.
          type: object
          additionalProperties: true
        credential:
          description: The credential to use when creating the new model.
          type: string
        name:
          description: The name of the new model.
          type: string
        owner:
          description: Identifier of the owner of the new model.
          type: string
        region:
          description: Identifier of the cloud region in which to create the model.
          type: string
      additionalProperties: false
      required:
        - name
        - owner
    ModelDefaults:
      description: Model defaults for a given cloud.
      type: object
      properties:
        controller:
          type: object
          additionalProperties: true
        default:
          type: object
          additionalProperties: true
        regions:
          type: array
          items:
            $ref: "#/components/schemas/RegionDefaults"
      additionalProperties: false
    ModelDefaultsList:
      description: A list of model defaults for the specified clouds
      type: object
      properties:
        model-defaults:
          type: array
          items:
            $ref: "#/components/schemas/ModelDefaults"
      additionalProperties: false
      required:
        - model-defaults
    ModelDefaultsUpdate:
      type: object
      description: |
        An object representing the model defaults to update. Keys represent the model defaults to
        set, and values represent the desired values. To 'unset' a model default, its value
        should be set to `null`.
      additionalProperties: false
    ModelDetail:
      description: Detailed administrative information about a model
      allOf:
        - $ref: "#/components/schemas/Model"
        - type: object
          properties:
            cloud-credential-validity:
              type: boolean
            default-base:
              type: string
            machines:
              type: array
              items:
                $ref: "#/components/schemas/ModelMachine"
            secret-backends:
              type: array
              items:
                $ref: "#/components/schemas/SecretBackend"
            supported-features:
              type: array
              items:
                $ref: "#/components/schemas/SupportedFeature"
          additionalProperties: false
          required:
            - machines
            - secret-backends
    ModelEntityCount:
      type: object
      properties:
        count:
          type: integer
        entity:
          type: string
      additionalProperties: false
      required:
        - entity
        - count
    ModelFilesystemInfo:
      description: Represents a filesystem within the model.
      allOf:
        - $ref: "#/components/schemas/ModelStorageAttributes"
    ModelList:
      type: object
      properties:
        models:
          description: List of models.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Model"
              - $ref: "#/components/schemas/ModelDetail"
      additionalProperties: false
      required:
        - models
    ModelMachine:
      type: object
      properties:
        display-name:
          type: string
        ha-primary:
          type: boolean
        hardware:
          $ref: "#/components/schemas/MachineHardware"
        has-vote:
          type: boolean
        id:
          type: string
        instance-id:
          type: string
        message:
          type: string
        status:
          type: string
        wants-vote:
          type: boolean
      additionalProperties: false
      required:
        - id
    ModelMigrationStatus:
      description: Status information about a model migration, including start and finish time.
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        status:
          type: string
      additionalProperties: false
      required:
        - status
        - start
    ModelSLAInfo:
      type: object
      properties:
        level:
          type: string
        owner:
          type: string
      additionalProperties: false
      required:
        - level
        - owner
    ModelStatus:
      type: object
      properties:
        application-count:
          type: integer
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ModelApplicationInfo"
        error:
          $ref: "#/components/schemas/Error"
        filesystems:
          type: array
          items:
            $ref: "#/components/schemas/ModelFilesystemInfo"
        hosted-machine-count:
          type: integer
        life:
          type: string
        machines:
          type: array
          items:
            $ref: "#/components/schemas/ModelMachine"
        model:
          description: Identifier of the model.
          type: string
        owner:
          description: Identifier of the model's owner.
          type: string
        type:
          type: string
        unit-count:
          type: integer
        volumes:
          type: array
          items:
            $ref: "#/components/schemas/ModelVolumeInfo"
      additionalProperties: false
      required:
        - model
        - life
        - type
        - hosted-machine-count
        - application-count
        - unit-count
        - owner
    ModelStorageAttributes:
      type: object
      properties:
        detachable:
          type: boolean
        id:
          type: string
        message:
          type: string
        provider-id:
          type: string
        status:
          type: string
      additionalProperties: false
      required:
        - id
    ModelUpdate:
      type: object
      properties:
        cloud-credential:
          description: Identifier of the cloud credential.
          type: string
        user-access:
          description: List of model user access updates.
          $ref: "#/components/schemas/ModelUserAccessUpdateList"
        config:
          description: Model configuration keys to update.
          type: object
          additionalProperties: true
        constraints:
          description: Model constraints to update.
          $ref: "#/components/schemas/Constraints"
      additionalProperties: false
    ModelUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/ModelUserAccess"
        - type: object
          properties:
            display-name:
              type: string
          additionalProperties: false
          required:
            - display-name
    ModelUserAccess:
      type: object
      properties:
        access:
          description: Level of access granted to the specified user.
          type: string
          enum:
            - read
            - write
            - admin
        user:
          description: Identifier of the user to whom permissions apply.
          type: string
      additionalProperties: false
      required:
        - access
        - user
    ModelUserAccessUpdate:
      type: object
      allOf:
        - $ref: "#/components/schemas/ModelUserAccess"
        - type: object
          properties:
            action:
              description: Whether to 'grant' or 'revoke' the given permission for the specified user.
              type: string
              enum:
                - grant
                - revoke
          required:
            - action
      additionalProperties: false
    ModelUserAccessUpdateList:
      type: object
      properties:
        permissions:
          description: List of model access updates.
          type: array
          items:
            $ref: "#/components/schemas/ModelUserAccessUpdate"
      additionalProperties: false
      required:
        - permissions
    ModelVolumeInfo:
      description: Represents a volume within the model
      allOf:
        - $ref: "#/components/schemas/ModelStorageAttributes"
    Placement:
      description: Defines a placement directive, which has a scope and a value that is scope-specific.
      type: object
      properties:
        directive:
          description: Scope-specific placement directive.
          type: string
        scope:
          description: Can be a container type or a machine scope (#).
          oneOf:
            - $ref: "#/components/schemas/ContainerType"
            - const: "#"
      additionalProperties: false
      required:
        - scope
        - directive
    RegionDefaults:
      type: object
      properties:
        region-name:
          type: string
        value:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - region-name
        - value
    Resource:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        type:
          type: string
          enum:
            - file
            - oci-image
        pending-upload:
          description: |
            True if the deployment of an application is blocked pending the upload of this
            resource.
          type: boolean
          default: false
        descriptor:
          description: Path or image url set when resource is created.
          type: string
    Secret:
      type: object
      properties:
        created-at:
          type: string
          format: date-time
        description:
          type: string
        label:
          type: string
        expires-at:
          type: string
          format: date-time
        latest-revision:
          type: integer
        rotates-at:
          type: string
          format: date-time
        owner:
          type: string
        revisions:
          type: array
          items:
            $ref: "#/components/schemas/SecretRevision"
        rotate-policy:
          type: string
          enum:
            - never
            - hourly
            - daily
            - weekly
            - monthly
            - quarterly
            - yearly
        updated-at:
          type: string
          format: date-time
        uri:
          type: string
        value:
          type: object
          additionalProperties: true
        version:
          type: integer
      additionalProperties: false
      required:
        - created-at
        - latest-revision
        - owner
        - revisions
        - updated-at
        - uri
        - version
    SecretBackend:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - controller
            - kubernetes
            - vault
        config:
          type: object
          additionalProperties: true
        name:
          type: string
        num-secrets:
          type: integer
        token-rotate-interval:
          type: integer
      additionalProperties: false
      required:
        - name
        - type
        - config
    SecretBackendList:
      type: object
      properties:
        secret-backends:
          description: List of secret backends.
          type: array
          items:
            $ref: "#/components/schemas/SecretBackend"
      additionalProperties: false
      required:
        - secret-backends
    SecretList:
      type: object
      properties:
        secrets:
          description: List of secrets.
          type: array
          items:
            $ref: "#/components/schemas/Secret"
      additionalProperties: false
      required:
        - spaces
    SecretRevision:
      type: object
      properties:
        backend-name:
          type: string
        created-at:
          type: string
          format: date-time
        expires-at:
          type: string
          format: date-time
        revision:
          type: integer
        updated-at:
          type: string
          format: date-time
        value-ref:
          $ref: "#/components/schemas/SecretValueRef"
      additionalProperties: false
      required:
        - revision
    SecretValueRef:
      type: object
      properties:
        # TODO: Should these be strings or ints?
        backend-id:
          type: string
        revision-id:
          type: string
      additionalProperties: false
      required:
        - backend-id
        - revision-id
    Space:
      type: object
      properties:
        id:
          type: string
          description: Internal ID of the space.
        name:
          type: string
          description: Unique name of the space.
        subnets:
          type: array
          items:
            $ref: "#/components/schemas/Subnet"
          description: A list of subnets in this space.
        applications:
          type: array
          items:
            type: string
          description: A list of application names associated with this space.
        machine-count:
          type: integer
          description: Number of machines associated with this space.
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - id
        - name
        - subnets
    SpaceCreateArgs:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the space.
        cidrs:
          type: array
          items:
            type: string
          default: []
          description: A list of CIDRs that are in the space.
      additionalProperties: false
      required:
        - name
    SpaceList:
      type: object
      properties:
        spaces:
          description: List of spaces.
          type: array
          items:
            $ref: "#/components/schemas/Space"
      additionalProperties: false
      required:
        - spaces
    SpaceUpdateArgs:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the space.
        cidrs:
          type: array
          items:
            type: string
          description: A list of CIDRs that are in the space.
      additionalProperties: false
    StorageConstraints:
      type: object
      properties:
        count:
          type: integer
        pool:
          type: string
        size:
          type: integer
      additionalProperties: false
    Subnet:
      type: object
      properties:
        cidr:
          description: CIDR of the subnet in IPv4 or IPv6 notation.
          type: string
        id:
          description: Unique identifier for the subnet.
          type: string
        provider-id:
          description: Provider-specific subnet ID (if applicable).
          type: string
        provider-network-id:
          description: ID of the network containing this subnet from the provider's perspective.
          type: string
        provider-space-id:
          description: ID of the space containing this subnet from the provider's perspective.
          type: string
        space:
          description: The Juju network space this subnet is associated with.
          type: string
        status:
          description: Describes the lifecycle stage of the subnet.
          type: string
          enum:
            - alive
            - dying
            - dead
        vlan-tag:
          description: Between 1 and 4094 for VLANs; 0 for normal networks. IEEE 802.1Q standard.
          type: integer
          minimum: 0
          maximum: 4094
        zones:
          description: One or more Availability Zones this subnet is associated with.
          type: array
          items:
            $ref: "#/components/schemas/AvailabilityZone"
      additionalProperties: false
      required:
        - cidr
        - id
        - space
        - status
        - vlan-tag
        - zones
    SubnetList:
      type: object
      properties:
        subnets:
          description: List of subnets.
          type: array
          items:
            $ref: "#/components/schemas/Subnet"
      additionalProperties: false
      required:
        - subnets
    Success:
      type: object
      properties:
        status:
          type: string
          examples:
            - Success.
        status_code:
          type: integer
          examples:
            - 200
        type:
          type: string
          examples:
            - sync
      additionalProperties: false
    SupportedFeature:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - name
        - description
    User:
      type: object
      properties:
        display-name:
          type: string
        username:
          type: string
        enabled:
          type: boolean
          default: true
        access:
          description: Level of access granted to the specified user.
          type: string
          enum:
            - login
            - superuser
        created-by:
          type: string
          description: Identifier of user that created this user.
        created-at:
          type: string
          format: date-time
        last-connection:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - display-name
        - username
        - enabled
        - access
    UserArgs:
      type: object
      properties:
        display-name:
          type: string
        username:
          type: string
        enabled:
          type: boolean
          default: true
        password:
          type: string
      additionalProperties: false
      required:
        - display-name
        - username
        - password
    Version:
      type: object
      properties:
        build:
          type: integer
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        tag:
          type: string
      additionalProperties: false
      required:
        - major
        - minor
        - tag
        - patch
        - build
  parameters:
    All:
      in: query
      name: all
      description: List all instances of entity, irrespective of user.
      required: false
      schema:
        type: string
        default: "false"
        enum:
          - "true"
          - "false"
    Application:
      in: path
      name: app
      required: true
      description: The name of a deployed application.
      schema:
        type: string
    AvailabilityZone:
      in: query
      name: az
      required: false
      description: The name of an Availability Zone.
      schema:
        type: string
    CIDRs:
      in: query
      name: cidrs
      required: false
      description: List of CIDRs used to filter subnets.
      schema:
        type: array
        items:
          type: string
    CharmName:
      in: path
      name: charm-name
      required: true
      description: The name of the Charm.
      schema:
        type: string
    Cloud:
      in: path
      name: cloud
      required: true
      description: The name of a cloud in the controller.
      schema:
        type: string
    DestroyStorage:
      in: query
      name: destroy-storage
      required: false
      schema:
        type: boolean
    Detailed:
      in: query
      name: detailed
      description: Return detailed information about requested entity.
      required: false
      schema:
        type: boolean
        default: false
    DryRun:
      in: query
      name: dry-run
      required: false
      schema:
        type: boolean
        default: false
    Force:
      in: query
      name: force
      required: false
      schema:
        type: boolean
        default: false
    Integration:
      in: path
      name: integration
      required: true
      schema:
        # TODO: jam 2025-02-20 should this be an opaque string instead?
        type: integer
    KeepInstance:
      in: query
      name: keep-instance
      required: false
      schema:
        type: boolean
        default: false
    MachineID:
      in: path
      name: machine-id
      required: true
      description: The id of a machine in the model.
      schema:
        type: string
    MaxWait:
      in: query
      name: max-wait
      required: false
      schema:
        type: integer
    Model:
      in: path
      name: model
      required: true
      description: The name of a model in the controller.
      schema:
        type: string
    Namespace:
      in: path
      name: namespace
      required: true
      description: The namespace that the model exists in. Frequently this is a username
      schema:
        type: string
    ReloadSpaces:
      in: query
      name: reload
      required: false
      description: Refresh spaces from the substrate.
      schema:
        type: string
        default: "false"
        enum:
          - "true"
          - "false"
    Resource:
      in: path
      name: resource
      required: true
      description: The name of a resource for an application.
      schema:
        type: string
    SecretBackend:
      in: path
      name: secret-backend
      description: The name of a secret backend.
      required: true
      schema:
        type: string
    SecretBackendNames:
      in: query
      name: names
      description: Filter secret backends by name.
      required: false
      schema:
        type: array
        items:
          type: string
    SecretsFilter:
      in: query
      name: filter
      description: Filter secrets returned.
      required: false
      schema:
        type: string
    ShowSecrets:
      in: query
      name: show-secrets
      description: Reveal secret values in response.
      required: false
      schema:
        type: string
        default: "false"
        enum:
          - "true"
          - "false"
    ShowSupported:
      in: query
      name: show-supported
      description: Show all supported clouds on the controller, not just those already in use.
      required: false
      schema:
        type: string
        default: "false"
        enum:
          - "true"
          - "false"
    Space:
      in: path
      name: space
      required: true
      description: The name of a Juju Space.
      schema:
        type: string
    SpaceQuery:
      in: query
      name: space
      required: false
      description: The name of a Juju Space.
      schema:
        type: string
    Subnet:
      in: path
      name: subnet
      required: true
      description: The ID of a Juju Subnet.
      schema:
        type: string
    Timeout:
      in: query
      name: timeout
      required: false
      schema:
        type: integer
    User:
      in: path
      name: user
      required: true
      description: Username of a user on the controller.
      schema:
        type: string
    UserQuery:
      in: query
      name: user
      required: true
      description: Username of a user on the controller.
      schema:
        type: string
    Wait:
      in: query
      name: wait
      required: false
      schema:
        type: boolean
        default: true
  responses:
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    EmptySyncResponse:
      description: Empty sync response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    EntityCreated:
      description: Entity created response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
      headers:
        Location:
          schema:
            type: string
            format: uri
          description: The location of the newly created entity.
    Forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
# Use this section to define reusable objects
# callbacks: {}
# examples: {}
# headers: {}
# links: {}
# pathItems: {}
# requestBodies: {}
# responses: {}
# securitySchemes: {}
